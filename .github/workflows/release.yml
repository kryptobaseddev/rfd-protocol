name: Release Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release type'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'patch'
          - 'minor'
          - 'major'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  check-commits:
    name: Check Commits
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.check.outputs.next_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release
      
      - name: Check if release needed
        id: check
        run: |
          # Check if there are releasable commits
          if [[ "${{ github.event.inputs.force_release }}" != "" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "next_version=${{ github.event.inputs.force_release }}" >> $GITHUB_OUTPUT
          else
            # Use semantic-release to check
            semantic-release version --print
            if [ $? -eq 0 ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              VERSION=$(semantic-release version --print)
              echo "next_version=$VERSION" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  test:
    name: Test Suite
    needs: check-commits
    if: needs.check-commits.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run tests
        run: |
          pytest tests/ -v --tb=short
        continue-on-error: true  # During dogfooding phase
      
      - name: Lint check
        run: |
          ruff check src tests
          black --check src tests

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package with twine
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  release:
    name: Semantic Release
    needs: build
    runs-on: ubuntu-latest
    concurrency: release
    outputs:
      version: ${{ steps.release.outputs.version }}
      released: ${{ steps.release.outputs.released }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release
      
      - name: Configure git
        run: |
          git config --local user.email "bot@rfd-protocol.dev"
          git config --local user.name "RFD Bot"
      
      - name: Python Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.force_release }}" != "" ]]; then
            semantic-release version --${{ github.event.inputs.force_release }}
          else
            semantic-release version
          fi
          
          semantic-release publish
          
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT

  publish-pypi:
    name: Publish to PyPI
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    environment: release
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.version }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/*
        continue-on-error: true
      
      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
        continue-on-error: true

  create-github-release:
    name: Create GitHub Release
    needs: [release, publish-pypi]
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.version }}
          fetch-depth: 0
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      
      - name: Generate Release Notes
        id: notes
        run: |
          # Get the latest tag
          LATEST_TAG=${{ needs.release.outputs.version }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^)
          
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commit messages between tags
          git log $PREVIOUS_TAG..$LATEST_TAG --pretty=format:"* %s (%h)" >> RELEASE_NOTES.md
          
          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "pip install rfd-protocol==$LATEST_TAG" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.version }}
          name: RFD Protocol ${{ needs.release.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}