#!/usr/bin/env python3
"""
RFD Project Setup Script
Quick project initialization with common patterns
"""

import os
import json
import subprocess
import sys
from pathlib import Path
from typing import Dict, Any

def setup_python_fastapi(project_name: str, project_dir: Path):
    """Setup Python FastAPI project"""
    print(f"Setting up Python FastAPI project: {project_name}")
    
    # Create requirements.txt
    requirements = """# Core API
fastapi==0.104.1
uvicorn[standard]==0.24.0

# Database
sqlalchemy==2.0.23
sqlite3

# Validation  
pydantic==2.5.0

# Development
pytest==7.4.3
httpx==0.25.2
"""
    (project_dir / "requirements.txt").write_text(requirements.strip())
    
    # Create main.py template
    main_py = """from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI(title="{project_name}")

class HealthResponse(BaseModel):
    status: str
    version: str

@app.get("/health", response_model=HealthResponse)
def health():
    return HealthResponse(status="healthy", version="1.0.0")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
""".format(project_name=project_name)
    
    (project_dir / "main.py").write_text(main_py)
    
    # Create test file
    test_py = """import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_health():
    response = client.get("/health")
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "healthy"
"""
    
    (project_dir / "test_main.py").write_text(test_py)
    
    return {
        'language': 'python',
        'framework': 'fastapi',
        'database': 'sqlite',
        'files_created': ['requirements.txt', 'main.py', 'test_main.py']
    }

def setup_javascript_express(project_name: str, project_dir: Path):
    """Setup JavaScript Express project"""
    print(f"Setting up JavaScript Express project: {project_name}")
    
    # Create package.json
    package_json = {
        "name": project_name.lower().replace(' ', '-'),
        "version": "1.0.0",
        "description": f"{project_name} API",
        "main": "server.js",
        "scripts": {
            "start": "node server.js",
            "dev": "nodemon server.js",
            "test": "jest"
        },
        "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "helmet": "^7.0.0"
        },
        "devDependencies": {
            "nodemon": "^3.0.1",
            "jest": "^29.7.0",
            "supertest": "^6.3.3"
        }
    }
    
    with open(project_dir / "package.json", 'w') as f:
        json.dump(package_json, f, indent=2)
    
    # Create server.js
    server_js = """const express = require('express');
const cors = require('cors');
const helmet = require('helmet');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', version: '1.0.0' });
});

// Start server
if (require.main === module) {
  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
  });
}

module.exports = app;
"""
    
    (project_dir / "server.js").write_text(server_js)
    
    # Create test file
    test_js = """const request = require('supertest');
const app = require('./server');

describe('Health Check', () => {
  test('GET /health should return healthy status', async () => {
    const response = await request(app).get('/health');
    expect(response.status).toBe(200);
    expect(response.body.status).toBe('healthy');
  });
});
"""
    
    (project_dir / "server.test.js").write_text(test_js)
    
    return {
        'language': 'javascript',
        'framework': 'express',
        'database': 'none',
        'files_created': ['package.json', 'server.js', 'server.test.js']
    }

def setup_typescript_react(project_name: str, project_dir: Path):
    """Setup TypeScript React project"""
    print(f"Setting up TypeScript React project: {project_name}")
    
    # Use Vite to create the project
    try:
        subprocess.run([
            'npm', 'create', 'vite@latest', '.', '--', 
            '--template', 'react-ts'
        ], cwd=project_dir, check=True)
        
        return {
            'language': 'typescript',
            'framework': 'react',
            'database': 'none',
            'files_created': ['Generated by Vite']
        }
    except subprocess.CalledProcessError:
        # Fallback manual setup
        package_json = {
            "name": project_name.lower().replace(' ', '-'),
            "version": "1.0.0",
            "type": "module",
            "scripts": {
                "dev": "vite",
                "build": "tsc && vite build",
                "preview": "vite preview"
            },
            "dependencies": {
                "react": "^18.2.0",
                "react-dom": "^18.2.0"
            },
            "devDependencies": {
                "@types/react": "^18.2.15",
                "@types/react-dom": "^18.2.7",
                "@vitejs/plugin-react": "^4.0.3",
                "typescript": "^5.0.2",
                "vite": "^4.4.5"
            }
        }
        
        with open(project_dir / "package.json", 'w') as f:
            json.dump(package_json, f, indent=2)
        
        return {
            'language': 'typescript',
            'framework': 'react',
            'database': 'none',
            'files_created': ['package.json']
        }

def create_project_spec(project_name: str, stack_info: Dict[str, Any]) -> str:
    """Create PROJECT.md specification"""
    
    # Determine features based on stack
    features = []
    if stack_info['framework'] in ['fastapi', 'express']:
        features = [
            {
                'id': 'health_check',
                'description': 'API health check endpoint',
                'acceptance': 'GET /health returns 200 with {status: healthy}',
                'status': 'pending'
            },
            {
                'id': 'core_api',
                'description': 'Core API functionality',
                'acceptance': 'Main endpoints work with real data',
                'status': 'pending'
            }
        ]
    elif stack_info['framework'] == 'react':
        features = [
            {
                'id': 'app_shell',
                'description': 'Basic application shell and routing',
                'acceptance': 'App loads and displays main components',
                'status': 'pending'
            },
            {
                'id': 'user_interface',
                'description': 'Core user interface components',
                'acceptance': 'Users can interact with the application',
                'status': 'pending'
            }
        ]
    
    # Generate API contract for web frameworks
    api_contract = {}
    if stack_info['framework'] in ['fastapi', 'express']:
        port = 8000 if stack_info['framework'] == 'fastapi' else 3000
        api_contract = {
            'base_url': f'http://localhost:{port}',
            'health_check': '/health',
            'endpoints': [
                {
                    'method': 'GET',
                    'path': '/health',
                    'validates': 'returns 200 with {status: string}'
                }
            ]
        }
    
    spec = {
        'version': '1.0',
        'name': project_name,
        'stack': {
            'language': stack_info['language'],
            'framework': stack_info['framework'],
            'database': stack_info['database']
        },
        'rules': {
            'max_files': 20,
            'max_loc_per_file': 200,
            'must_pass_tests': True,
            'no_mocks_in_prod': True
        },
        'features': features,
        'constraints': [
            "NO authentication libraries until core works",
            "NO database migrations until schema stable",
            "NO optimization until features work",
            "NO abstractions until patterns emerge"
        ]
    }
    
    if api_contract:
        spec['api_contract'] = api_contract
    
    # Convert to frontmatter format
    import yaml
    frontmatter = yaml.dump(spec, default_flow_style=False)
    
    content = f"""---
{frontmatter}---

# {project_name}

{project_name} built with Reality-First Development protocol.

## Technology Stack

- **Language**: {stack_info['language'].title()}
- **Framework**: {stack_info['framework'].title()}
- **Database**: {stack_info['database'].title() if stack_info['database'] != 'none' else 'None'}

## Features

{''.join([f"- **{f['id']}**: {f['description']}" for f in features])}

## Development

1. Install dependencies: `pip install -r requirements.txt` or `npm install`
2. Start development: `rfd session start <feature_id>`
3. Build and test: `rfd build && rfd validate`
4. Save progress: `rfd checkpoint "message"`

Built with [RFD Protocol](https://github.com/nexus-dev/rfd-protocol).
"""
    
    return content

def main():
    """Main setup script"""
    if len(sys.argv) < 2:
        print("Usage: python setup-project.py <project_name> [template]")
        print("Templates: python-fastapi, javascript-express, typescript-react")
        sys.exit(1)
    
    project_name = sys.argv[1]
    template = sys.argv[2] if len(sys.argv) > 2 else 'python-fastapi'
    
    # Create project directory
    project_dir = Path(project_name.lower().replace(' ', '-'))
    project_dir.mkdir(exist_ok=True)
    os.chdir(project_dir)
    
    print(f"Creating {template} project: {project_name}")
    
    # Setup based on template
    if template == 'python-fastapi':
        stack_info = setup_python_fastapi(project_name, project_dir)
    elif template == 'javascript-express':
        stack_info = setup_javascript_express(project_name, project_dir)
    elif template == 'typescript-react':
        stack_info = setup_typescript_react(project_name, project_dir)
    else:
        print(f"Unknown template: {template}")
        sys.exit(1)
    
    # Create PROJECT.md
    project_spec = create_project_spec(project_name, stack_info)
    (project_dir / "PROJECT.md").write_text(project_spec)
    
    # Initialize RFD
    try:
        subprocess.run(['rfd', 'init'], check=True)
        print(f"✅ Project {project_name} created successfully!")
        print(f"📁 Directory: {project_dir.absolute()}")
        print(f"📄 Files: {', '.join(stack_info['files_created'])}")
        print(f"\n🚀 Next steps:")
        print(f"   cd {project_dir}")
        print(f"   rfd session start {stack_info.get('first_feature', 'health_check')}")
        
    except subprocess.CalledProcessError:
        print("⚠️  RFD not found - install with: pip install nexus-rfd-protocol")
        print(f"✅ Project template created at: {project_dir.absolute()}")

if __name__ == '__main__':
    main()